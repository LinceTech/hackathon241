plugins {
    id 'java'
    id 'war'
    id "com.bmuschko.cargo" version "2.9.0"
}

group 'br.com.lince'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.9.2'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

dependencies {
    // Dependências para WEB
    implementation("com.github.jknack:handlebars:4.3.1")

    // Dependências relacionadas ao banco de dados
    implementation(platform("org.jdbi:jdbi3-bom:3.45.2"))
    implementation("org.jdbi:jdbi3-core")
    implementation("org.jdbi:jdbi3-sqlobject")
    implementation("org.jdbi:jdbi3-freemarker")
    implementation("com.microsoft.sqlserver:mssql-jdbc:12.6.2.jre11")

    // Dependências padrão
    compileOnly('javax.servlet:javax.servlet-api:4.0.1')
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

// Configurar plugin utilizado para executar a aplicação utilizando Gradle
cargo {
    // User TomCat 9 (ultima versão compatível com Java 11)
    containerId = 'tomcat9x'
    port = 9090

    // Configurações da aplicação
    deployable {
        // Caminho raiz do programa
        context = 'hackathon'
    }

    // Configurações do ambiente de execução
    local {
        // Caminho da instalação do TomCat
        homeDir = file('C:\\jdk\\tomcat\\apache-tomcat-9.0.89')

        // Definir que a JVM deve usar encoding UTF-8
        jvmArgs = '-Dfile.encoding=utf-8'

        // Caminho do arquivo de logs de saida
        outputFile = file('build\\output.log')

        // Tempo limite para iniciar/interromper
        startStopTimeout = 60000

        // Configurações do TomCat
        containerProperties {
            property 'cargo.tomcat.ajp.port', 9099
        }
    }
}